gocd:
  rbac:
    create: true
    apiVersion: v1
    extraRules:
      - apiGroups: [ "" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "apps", "extensions" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "batch" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "autoscaling" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "policy" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "rbac.authorization.k8s.io" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "storage.k8s.io" ]
        resources: [ "*" ]
        verbs: [ "*" ]
      - apiGroups: [ "secrets.hashicorp.com" ]
        resources: [ "vaultauths", "vaultdynamicsecrets" ]
        verbs: [ "get", "list", "watch", "create", "update", "delete" ]
  server:
    tolerations:
      - effect: "NoSchedule"
        key: xquare/platform
        operator: "Equal"
        value: "true"
    ingress:
      enabled: false
    service:
      type: "ClusterIP"
    env: # 처음에는 Plugin 없이 배포 해야함.
      extraEnvVars:
        - name: GOCD_PLUGIN_INSTALL_gocd-yaml-config-plugin
          value: https://github.com/tomzo/gocd-yaml-config-plugin/releases/download/v1.0.0-364/yaml-config-plugin-1.0.0-364.jar
    resources:
      requests:
        memory: 1024Mi
  agent:
    image:
      repository: "gocd/gocd-agent-docker-dind"
    serviceAccount:
      reuseTopLevelServiceAccount: true
      automountServiceAccountToken: true
    replicaCount: 1
    tolerations:
      - effect: "NoSchedule"
        key: xquare/platform
        operator: "Equal"
        value: "true"
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      fsGroup: 0
      fsGroupChangePolicy: "OnRootMismatch"
    privileged: true

    env:
      extraEnvVars:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-token
              key: GITHUB_TOKEN
    postStart:
      - "sh"
      - "-c"
      - |
        cd /home/go && \
        git clone https://github.com/team-xquare/xquare-gitops-repo && \
        cd xquare-gitops-repo && \
        git checkout v2
        git config --global user.name "xquare-admin"
        git config --global user.email "teamxquare@gmail.com"
        git remote set-url origin https://xquare-admin:$(cat /etc/config/keys/GITHUB_TOKEN)@github.com/team-xquare/xquare-gitops-repo.git
    persistence:
      extraVolumes:
        - name: kubectl
          emptyDir: { }
        - name: helm
          emptyDir: { }
        - name: github-token
          secret:
            secretName: github-token
            defaultMode: 0744
        - name: aws-cli
          emptyDir: { }
      extraVolumeMounts:
        - name: kubectl
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: helm
          mountPath: /usr/local/bin/helm
          subPath: helm
        - name: aws-cli
          mountPath: /usr/local/bin/aws
          subPath: aws
        - name: github-token
          mountPath: /etc/config/keys/
          readOnly: true

    initContainers:
      - name: install-aws-cli
        image: "ellerbrock/alpine-bash-curl-ssl:latest"
        command: [ "/bin/sh", "-c" ]
        args:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
            unzip awscliv2.zip && \
            ./aws/install && \
            rm -rf awscliv2.zip aws && \
            cp /usr/local/bin/aws /download/
        volumeMounts:
          - name: aws-cli
            mountPath: /download
        workingDir: /download
      - name: download-helm
        image: "ellerbrock/alpine-bash-curl-ssl:latest"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: helm
            mountPath: /download
        workingDir: /download
        command: [ "/bin/sh" ]
        args:
          - "-c"
          - |
            HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep tag_name | cut -d '"' -f 4) && \
            curl -LO https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz && \
            tar -zxvf helm-${HELM_VERSION}-linux-amd64.tar.gz && \
            mv linux-amd64/helm /target/helm && \
            chmod +x /target/helm
      - name: download-kubectl
        image: "ellerbrock/alpine-bash-curl-ssl:latest"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: kubectl
            mountPath: /download
        workingDir: /download
        command: ["/bin/sh"]
        args:
          - "-c"
          - 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl && mv ./kubectl /target/kubectl'
