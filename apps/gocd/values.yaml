gocd:
  server:
    toleration:
      - effect: "NoSchedule"
        key: xquare/server
        operator: "Equal"
        value: "true"
      - effect: "NoSchedule"
        key: xquare/platform
        operator: "Equal"
        value: "true"
      - effect: "NoSchedule"
        key: xquare/test
        operator: "Equal"
        value: "true"
    ingress:
      enabled: false
    service:
      type: "ClusterIP"
    env: # 처음에는 Plugin 없이 배포 해야함.
      extraEnvVars:
        - name: GOCD_PLUGIN_INSTALL_gocd-yaml-config-plugin
          value: https://github.com/tomzo/gocd-yaml-config-plugin/releases/download/v1.0.0-364/yaml-config-plugin-1.0.0-364.jar
  agent:
    replicaCount: 1
    toleration:
      - effect: "NoSchedule"
        key: xquare/server
        operator: "Equal"
        value: "true"
      - effect: "NoSchedule"
        key: xquare/platform
        operator: "Equal"
        value: "true"
      - effect: "NoSchedule"
        key: xquare/test
        operator: "Equal"
        value: "true"
    persistence:
      extraVolumes:
        - name: kubectl
          emptyDir: { }
        - name: helm
          emptyDir: { }
      extraVolumeMounts:
        - name: kubectl
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: helm
          mountPath: /usr/local/bin/helm
          subPath: helm

    initContainers:
      - name: download-helm
        image: "ellerbrock/alpine-bash-curl-ssl:latest"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: helm
            mountPath: /download
        workingDir: /download
        command: [ "/bin/sh" ]
        args:
          - "-c"
          - |
            HELM_VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | grep tag_name | cut -d '"' -f 4) && \
            curl -LO https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz && \
            tar -zxvf helm-${HELM_VERSION}-linux-amd64.tar.gz && \
            mv linux-amd64/helm . && \
            chmod +x ./helm
            ls
      - name: download-kubectl
        image: "ellerbrock/alpine-bash-curl-ssl:latest"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: kubectl
            mountPath: /download
        workingDir: /download
        command: ["/bin/bash"]
        args:
          - "-c"
          - 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl'
